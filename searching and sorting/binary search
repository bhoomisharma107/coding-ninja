BINARY SEARCH
Given a sorted array arr[] of n elements, write a function to search a given element x in arr[].
A simple approach is to do a linear search. The time complexity of the above algorithm is O(n). Another approach to perform the same task is using Binary Search. 
Binary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array
. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half
. Repeatedly check until the value is found or the interval is empty.
==============================================================================================================================================================================
QUESTION
 Code Binary Search
You have been given a sorted(in ascending order) integer array/list(ARR) of size N and an element X. Write a function to search this element in the given input array/list usinG
'Binary Search'. Return the index of the element in the input array/list. In case the element is not present in the array/list, then return -1.
SOLUTION
CODE:-
int binarySearch(int *input, int n, int val)
{
    //Write your code here
    int l=0,h=n-1;
    while(l<=h)
    {
       int mid=(l+h)/2;
        if(val>input[mid])    
           {
            l=mid+1;
        }
        else if(val==input[mid])
        {
            return mid;
        }
        else
        {  h=mid-1;     
        }
    }
    return -1;
}
