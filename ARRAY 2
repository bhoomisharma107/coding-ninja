You have been given an empty array(ARR) and its size N. The only input taken from the user will be N and you need not worry about the array.
Your task is to populate the array using the integer values in the range 1 to N(both inclusive) in the order - 1,3,.......4,2.
Note:
You need not print the array. You only need to populate it.
================================================================================================================================================================================
CODE:-
 int s=0,e=n-1,value=1;
    while(s<=e)// array will get full when s  becomes greater than e SINCE ODD NUMBERS ARE GETTIG FILLED FROM STARTING AND EVEN ARE GETTING FILLED FROM BACK SIDE AND ARRAY GETS FULL WHEN S>E
    {
        if(value%2==1)//if it is odd
        {
           arr[s]=value;
            value++;
            s++;
        }
        else//AGR EVEN HO 
        {
            arr[e]=value;
            value++;
            e--;
        }
    }

}
================================================================================================================================================================================

CODE FOR REVERSING AN ARRAY

int i=0;
int j=size-1;
while(i<j)// FOR EVEN AND ODD LENGTH ARRAY THE CONDITION WILL BE I<J{
int temp=arr[i];
arr[i]=arr[j];
arr[j]=temp;
i+;
j--;
}
===============================================================================================================================================================================

You have been given an array/list(ARR) of size N. You need to swap every pair of alternate elements in the array/list.
You don't need to print or return anything, just change in the input array itself.
Input Format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.
==============================================================================================================================================================================
CODE:-
void swapAlternate(int *arr, int size)
{
    //Write your code here
    int i=0;
    while(i<=size-2)//stooping condition for both odd as well as even or while(i<size-1)
    {
        int temp=arr[i];
        arr[i]=arr[i+1];
        arr[i+1]=temp;
        i=i+2;
        
        
    }
}
==============================================================================================================================================================================


You have been given an integer array/list(ARR) of size N. Where N is equal to [2M + 1].
Now, in the given array/list, 'M' numbers are present twice and one number is present only once.
You need to find and return that number which is unique in the array/list.
 Note:
Unique element is always present in the array/list according to the given condition.
Input format :
============================================================================================================================================================================
CODE:
int findUnique(int *arr, int size)
{
    //Write your code here
    for(int i=0;i<=size-1;i++)
    {
        int j;
        for(j=0;j<=size-1;j++) 
        {
            if (arr[i]==arr[j] && i!=j)
                break;
        }
if(j==size)
{
    return arr[i];
}
    }
    return -1;}


















