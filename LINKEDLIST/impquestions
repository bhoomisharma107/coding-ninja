AppendLastNToFirst
Send Feedback
You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first line of each test case or query contains the elements of the singly linked list separated by a single space. 

The second line contains the integer value 'N'. It denotes the number of nodes to be moved from last to the front of the singly linked list.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
Output format :
For each test case/query, print the resulting singly linked list of integers in a row, separated by a single space.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
0 <= N < M
Time Limit: 1sec

Where 'M' is the size of the singly linked list.
Sample Input 1 :
2
1 2 3 4 5 -1
3
10 20 30 40 50 60
==================================================================================================================================================================================
SOLUTION:
int Count(Node *head)
{
    Node *temp=head;
    int count;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
        
    }
    return count;
}
Node *appendLastNToFirst(Node *head, int n)
{
    Node *prev;
    Node *temp=head;
   int length=Count(head);
 if(head==NULL || head->next==NULL || n==0)
     return head;
 
   
        int skip=length-n;
            while(skip>0)
            {
                prev=temp;
                temp=temp->next;
                skip--;
            }
 Node *tail=head;
 while(tail->next!=NULL)
 {
     tail=tail->next;
     
 }
 tail->next=head;
        prev->next=NULL;
        head=temp;
    return head;
    
}
===============================================================================================================================================================================
QUESTION 2:

Eliminate duplicates from LL
Send Feedback
You have been given a singly linked list of integers where the elements are sorted in ascending order. Write a function that removes the consecutive duplicate values such that the given list only contains unique elements and returns the head to the updated list.
 Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

The first and the only line of each test case or query contains the elements(in ascending order) of the singly linked list separated by a single space.
==============================================================================================================================================================================
CODE 2:
Node *removeDuplicates(Node *head)
{
    //Write your code here
    Node *temp=head;
    Node *next=NULL;
    if(head==NULL || head->next==NULL)
        return head;
    while(temp->next!=NULL)//temp ke next kyunki second last tk jana tha rna runtime error dega
    {
        if(temp->data==temp->next->data)
        {
            next=temp->next->next;
            free(temp->next);
            temp->next=next;
        }
        else
        {
            temp=temp->next;
        }

}
return head;}
==================================================================================================================================================================================



