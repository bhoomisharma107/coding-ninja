Sort 0 1
Send Feedback
You have been given an integer array/list(ARR) of size N that contains only integers, 0 and 1. Write a function to sort this array/list. Think of a solution which scans the array/list only once and don't require use of an extra array/list.
Note:
You need to change in the given array/list itself. Hence, no need to return or print anything. 
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers(all 0s and 1s) representing the elements in the array/list.
=================================================================================================================================================================================
CODE:-
void sortZeroesAndOne(int *input, int size)
{
    //Write your code here
    int i=0,j=size-1;//START I WITH O AND J WITH END
    
    while(i<j)//TILL ARRAY BECOMES FULL
    {
        if(input[i]==0)//CHECK IF STARTING IS ZERO THEN MOVE FORWARD
        {
            i++;
        }
        else if(input[j]==1)//CHECK IF END IS 1 ND MOVE BACKWARD
        {
            j--;
        }
        else//IF IT DONT HAPPENS THEN SWAP TWO COMPONENTS SO 0 WILL GO TO START AND 1 WILL GO TO END
        {
            int temp=input[i];
            input[i]=input[j];
            input[j]=temp;
            i++;
            j--;
        }
        
    }
}
================================================================================================================================================================================

Pair Sum
Send Feedback
You have been given an integer array/list(ARR) and a number X. Find and return the total number of pairs in the array/list which sum to X.
Note:
Given array/list can contain duplicate elements. 
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the first array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.

Third line contains an integer 'X'.
Output format :
For each test case, print the total number of pairs present in the array/list.

Output for every test case will be printed in a separate line.
===============================================================================================================================================================================
CODE:

int pairSum(int *input, int size, int x)
{
	//Write your code here
    int ans=0;

for(int i=0;i<=size-1;i++)// in pair sum we have to compare 2 digits till last so 
{
    for(int j=i+1;j<=size-1;j++)
    {
        if(input[i]+input[j]==x)
        {
            ans++;
        }
    }
}
return ans;}
============================================================================================================================================================================

Triplet Sum
Send Feedback
You have been given a random integer array/list(ARR) and a number X. Find and return the number of triplets in the array/list which sum to X.
Note :
Given array/list can contain duplicate elements.
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the first array/list.

Second line contains 'N' single space separated integers representing the elements in the array/list.

Third line contains an integer 'X'.
Output format :
For each test case, print the total number of triplets present in the array/list.

Output for every test case will be printed in a separate line.
==========================================================================================================================================================================
CODE
int tripletSum(int *input, int size, int x)
{
	//Write your code here
    int ans=0;
    for(int i=0;i<size-2;i++)//i will start from starting digit so it will stop at last third  number
    {
        for(int j=i+1;j<size-1;j++)//j will be next number to i and ill top at last second number
        {
            for(int k=j+1;k<=size-1;k++)// k will be next digit to j  and will stop at last number
            {
                if(input[i]+input[j]+input[k]==x)
                {
                    ans++;
                }
            }
        }
    }
    return ans;
}
==========================================================================================================================================================================

You have been given an integer array/list(ARR) of size N that contains only integers, 0 and 1. Write a function to sort this array/list. Think of a solution which scans the array/list only once and don't require use of an extra array/list.
Note:
You need to change in the given array/list itself. Hence, no need to return or print anything. 
Input format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains an integer 'N' representing the size of the array/list.

Second line contains 'N' single space separated integers(all 0s and 1s) representing the elements in the array/list.
Output format :
For each test case, print the sorted array/list elements in a row separated by a single space.

Output for every test case will be printed in a separate line.
 CODE:
 
void sortZeroesAndOne(int *input, int size)
{
    //Write your code here
    int i=0,j=size-1;//START I WITH O AND J WITH END
    
    while(i<j)//TILL ARRAY BECOMES FULL
    {
        if(input[i]==0)//CHECK IF STARTING IS ZERO THEN MOVE FORWARD
        {
            i++;
        }
        else if(input[j]==1)//CHECK IF END IS 1 ND MOVE BACKWARD
        {
            j--;
        }
        else//IF IT DONT HAPPENS THEN SWAP TWO COMPONENTS SO 0 WILL GO TO START AND 1 WILL GO TO END
        {
            int temp=input[i];
            input[i]=input[j];
            input[j]=temp;
            i++;
            j--;
        }
        
    }
    ===========================================================================================================================================================================

Array Intersection
Send Feedback
You have been given two integer arrays/list(ARR1 and ARR2) of size N and M, respectively. You need to print their intersection; An intersection for this problem can be defined when both the arrays/lists contain a particular value or to put it in other words, when there is a common value that exists in both the arrays/lists.
Note :
Input arrays/lists can contain duplicate elements.

The intersection elements printed would be in the order they appear in the first array/list(ARR1)
================================================================================================================================================================================
#include<climits//in order to include int min
void intersection(int *input1, int *input2, int size1, int size2)
{
    //Write your code here
    for(int i=0;i<=size1-1;i++)
        {
        for(int j=0;j<=size2-1;j++)
        { 
         
            if(input1[i]==input2[j])//when we find common element we print it 
            {
                cout<<input1[i]<<" ";
                input2[j]=INT_MIN;//then if we have duplicates then we asign negative infinity to  THE VALUE OF SECOND ARRAY AS (J)through IN-MIN SO THAT DUPLICATES DONT TAKE PART IN INTERSECTON  and j is aasigned int mi since array 1 is used for traversing and arry 2 is used for intersection checking
                break;//IN ORDER TO COME OUT OF OOOP AFTER DUPLICATES HAVE BEEN FOUND
            }
    
}
}}









